package com.ydespreaux.shared.data.jpa.configuration.repository;import com.ydespreaux.shared.data.ModelConverter;import com.ydespreaux.shared.data.jpa.JpaCustomRepository;import com.ydespreaux.shared.data.jpa.criteria.ICriteria;import com.ydespreaux.shared.data.jpa.criteria.SimpleCriteria;import com.ydespreaux.shared.data.jpa.SpecificationCriteria;import com.ydespreaux.shared.data.jpa.configuration.entities.Book;import com.ydespreaux.shared.data.jpa.configuration.entities.BookDTO;import org.springframework.data.domain.Page;import org.springframework.data.domain.PageImpl;import org.springframework.data.domain.Pageable;import org.springframework.data.jpa.domain.Specification;import org.springframework.data.jpa.repository.support.JpaEntityInformationSupport;import org.springframework.lang.Nullable;import org.springframework.stereotype.Repository;import javax.persistence.EntityManager;import javax.persistence.TypedQuery;import javax.persistence.criteria.CriteriaBuilder;import javax.persistence.criteria.CriteriaQuery;import javax.persistence.criteria.Predicate;import javax.persistence.criteria.Root;import java.util.List;import java.util.Optional;@Repositorypublic class BookRepositoryImpl extends JpaCustomRepository<Book, Long> implements BookRepositoryCustom{    /**     * @param em     */    public BookRepositoryImpl(EntityManager em) {        super(JpaEntityInformationSupport.getEntityInformation(Book.class, em), em);    }    /**     * @param criteres     * @param pageable     * @return     */    @Override    public Page<BookDTO> search(List<ICriteria> criteres, Pageable pageable) {        Specification<Book> spec = new SpecificationCriteria<>(criteres);        TypedQuery<Book> query = getTypedQuery(spec, pageable == null ? null : pageable.getSort(), "author");        BookConverter converter = new BookConverter();        return pageable == null ? new PageImpl<>(transformResult(query, converter)) : this.readPage(query, spec, Book.class, converter, pageable);    }    /**     * @param bookId     * @return     */    @Override    public Optional<BookDTO> findBookDTOById(Long bookId) {        TypedQuery<Book> query = getTypedQuery((Specification<Book>) (root, criteriaQuery, criteriaBuilder) -> criteriaBuilder.equal(root.get("id"), bookId), null, "author");        return transformSingleResult(query, new BookConverter());    }    private static class BookConverter implements ModelConverter<BookDTO, Book> {        /**         * @param source         * @return         */        @Override        public BookDTO convertToDTO(Book source) {            return BookDTO.builder()                    .title(source.getTitle())                    .description(source.getDescription())                    .author(source.getAuthor() == null ? null : source.getAuthor().getFirstName() + " " + source.getAuthor().getLastName())                    .editor(source.getEditor())                    .genre(source.getGenre())                    .id(source.getId())                    .price(source.getPrice())                    .publication(source.getPublication())                    .build();        }        @Nullable        @Override        public Book convert(BookDTO bookDTO) {            throw new UnsupportedOperationException();        }    }}