package com.ydespreaux.shared.data.elasticsearch.support;import com.ydespreaux.shared.data.elasticsearch.ScrolledPage;import com.ydespreaux.shared.data.elasticsearch.ScrolledPageable;import org.elasticsearch.index.query.QueryBuilder;import org.springframework.data.domain.Sort;import java.util.List;import java.util.Optional;/** * * @param <T> * @param <K> */public interface ElasticsearchRepository<T,K> {    /**     * Retrieves an entity by its id.     *     * @param id must not be {@literal null}.     * @return the entity with the given id or {@literal Optional#empty()} if none found     * @throws IllegalArgumentException if {@code id} is {@literal null}.     */    Optional<T> findById(K id);    /**     *     * @param id     * @return     */    Boolean existsById(K id);    /**     * Saves a given entity. Use the returned instance for further operations as the save operation might have changed the     * entity instance completely.     *     * @param entity must not be {@literal null}.     * @return the saved entity will never be {@literal null}.     */    T save(T entity);    /**     * Saves all given entities.     *     * @param entities must not be {@literal null}.     * @return the saved entities will never be {@literal null}.     * @throws IllegalArgumentException in case the given entity is {@literal null}.     */    List<T> save(List<T> entities);    /**     * Deletes the entity with the given id.     *     * @param id must not be {@literal null}.     * @throws IllegalArgumentException in case the given {@code id} is {@literal null}     */    void deleteById(K id);    /**     * Deletes a given entity.     *     * @param entity     * @throws IllegalArgumentException in case the given entity is {@literal null}.     */    void delete(T entity);    /**     * Deletes the given entities.     *     * @param entities     * @throws IllegalArgumentException in case the given {@link Iterable} is {@literal null}.     */    void deleteAll(List<T> entities);    /**     * Deletes all entities managed by the repository.     */    void deleteAll();    /**     *     */    void refresh();    /**     *     * @param query     * @return     */    List<T> search(QueryBuilder query, Sort sort);    /**     * Start new search with scroll api     * @param query     * @param pageable     * @return     */    ScrolledPage<T> search(QueryBuilder query, ScrolledPageable pageable);    /**     * Continue search with scroll api     * @param pageable     * @return     */    ScrolledPage<T> search(ScrolledPageable pageable);    /**     *     * @param scrollId     */    void clearSearch(String scrollId);}