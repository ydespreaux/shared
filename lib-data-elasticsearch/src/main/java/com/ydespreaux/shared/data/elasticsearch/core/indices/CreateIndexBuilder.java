package com.ydespreaux.shared.data.elasticsearch.core.indices;import com.google.gson.JsonElement;import com.google.gson.JsonObject;import lombok.extern.slf4j.Slf4j;import org.elasticsearch.action.admin.indices.create.CreateIndexRequest;import org.elasticsearch.common.xcontent.XContentType;import java.util.Arrays;import java.util.List;import java.util.Map;/** * */@Slf4jpublic class CreateIndexBuilder extends IndiceBuilder<CreateIndexRequest, CreateIndexBuilder> {    private static List<String> attributeNames = Arrays.asList(            SETTINGS_CONFIG,            ALIASES_CONFIG,            MAPPINGS_CONFIG);    /**     * @return     */    @Override    public CreateIndexRequest build() {        Map<String, JsonElement> settings = this.buildJsonElement(this.getSources());        CreateIndexRequest indexRequest = new CreateIndexRequest(this.getName());        // Settings        if (settings.containsKey(SETTINGS_CONFIG)) {            indexRequest.settings(settings.get(SETTINGS_CONFIG).toString(), XContentType.JSON);        }        // Mappings        if (settings.containsKey(MAPPINGS_CONFIG)) {            JsonObject mappingsElement = settings.get(MAPPINGS_CONFIG).getAsJsonObject();            mappingsElement.entrySet().forEach(entry -> indexRequest.mapping(entry.getKey(), xContentBuilder(entry.getValue())));        }        // Aliases        if (settings.containsKey(ALIASES_CONFIG)) {            indexRequest.aliases(this.xContentBuilder(settings.get(ALIASES_CONFIG)));        }        return indexRequest;    }    /**     * @return     */    @Override    protected List<String> getAttributeNames() {        return this.attributeNames;    }}