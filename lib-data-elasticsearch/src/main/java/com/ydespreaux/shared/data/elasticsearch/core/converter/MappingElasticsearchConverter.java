package com.ydespreaux.shared.data.elasticsearch.core.converter;import com.ydespreaux.shared.data.elasticsearch.core.mapping.ElasticsearchPersistentEntity;import com.ydespreaux.shared.data.elasticsearch.core.mapping.ElasticsearchPersistentProperty;import lombok.extern.slf4j.Slf4j;import org.springframework.beans.BeansException;import org.springframework.context.ApplicationContext;import org.springframework.context.ApplicationContextAware;import org.springframework.data.mapping.context.MappingContext;import org.springframework.util.Assert;import java.util.Map;import java.util.concurrent.ConcurrentHashMap;@Slf4jpublic class MappingElasticsearchConverter implements ElasticsearchConverter, ApplicationContextAware {    private final MappingContext<? extends ElasticsearchPersistentEntity<?>, ElasticsearchPersistentProperty> mappingContext;    private final Map<Class<?>, ElasticsearchPersistentEntity<?>> context = new ConcurrentHashMap<>();    public MappingElasticsearchConverter(MappingContext<? extends ElasticsearchPersistentEntity<?>, ElasticsearchPersistentProperty> mappingContext) {        Assert.notNull(mappingContext, "MappingContext must not be null!");        this.mappingContext = mappingContext;    }    @Override    public <T> ElasticsearchPersistentEntity<T> getRequiredPersistentEntity(Class<T> clazz) {        if (context.containsKey(clazz)) {            return (ElasticsearchPersistentEntity<T>)context.get(clazz);        }        ElasticsearchPersistentEntity<T> persistentEntity = (ElasticsearchPersistentEntity<T>)this.mappingContext.getRequiredPersistentEntity(clazz);        this.context.put(clazz, persistentEntity);        return persistentEntity;    }    /**     * Returns the underlying {@link MappingContext} used by the converter.     *     * @return never {@literal null}     */    @Override    public MappingContext<? extends ElasticsearchPersistentEntity<?>, ElasticsearchPersistentProperty> getMappingContext() {        return this.mappingContext;    }    @Override    public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {        if (mappingContext instanceof ApplicationContextAware) {            ((ApplicationContextAware) mappingContext).setApplicationContext(applicationContext);        }    }}