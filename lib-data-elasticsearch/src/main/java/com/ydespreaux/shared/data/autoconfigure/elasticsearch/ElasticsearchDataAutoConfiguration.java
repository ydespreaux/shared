package com.ydespreaux.shared.data.autoconfigure.elasticsearch;import com.ydespreaux.shared.data.autoconfigure.elasticsearch.settings.TemplateAction;import com.ydespreaux.shared.data.autoconfigure.elasticsearch.settings.TemplateProperties;import com.ydespreaux.shared.data.elasticsearch.core.ElasticsearchOperations;import com.ydespreaux.shared.data.elasticsearch.core.ElasticsearchTemplate;import com.ydespreaux.shared.data.elasticsearch.core.ResultsMapper;import com.ydespreaux.shared.data.elasticsearch.core.converter.ElasticsearchConverter;import lombok.extern.slf4j.Slf4j;import org.elasticsearch.client.RestHighLevelClient;import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;import org.springframework.boot.context.properties.EnableConfigurationProperties;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;/** * Configuration providing beans for ElasticSearch operation. * * @since 1.1.0 * @author yoann.despreaux */@Slf4j@Configuration@EnableConfigurationProperties({TemplateProperties.class})public class ElasticsearchDataAutoConfiguration extends ElasticsearchConfigurationSupport{    @Bean    @ConditionalOnMissingBean    public ElasticsearchOperations elasticsearchTemplate(            @SuppressWarnings("SpringJavaInjectionPointsAutowiringInspection") final RestHighLevelClient client,            final ElasticsearchConverter converter,            final ResultsMapper resultsMapper,            final TemplateProperties templateProperties) {        ElasticsearchTemplate operations = new ElasticsearchTemplate(client, converter, resultsMapper);        buildTemplates(templateProperties).forEach(template -> {            if (template.getAction() != TemplateAction.NONE) {                operations.createTemplate(template.getName(), template.getLocations(), template.getAction() == TemplateAction.CREATE_ONLY);            }        });        return operations;    }}