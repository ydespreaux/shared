package com.ydespreaux.shared.data.autoconfigure.elasticsearch;import com.google.gson.Gson;import com.google.gson.GsonBuilder;import com.ydespreaux.shared.data.elasticsearch.adapter.TimeTypeAdapterRegistry;import io.searchbox.client.JestClient;import io.searchbox.client.JestClientFactory;import io.searchbox.client.config.HttpClientConfig;import lombok.extern.slf4j.Slf4j;import org.apache.http.HttpHost;import org.springframework.beans.factory.ObjectProvider;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;import org.springframework.boot.autoconfigure.elasticsearch.jest.HttpClientConfigBuilderCustomizer;import org.springframework.boot.autoconfigure.elasticsearch.jest.JestProperties;import org.springframework.boot.autoconfigure.jackson.JacksonProperties;import org.springframework.boot.context.properties.EnableConfigurationProperties;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.util.Assert;import org.springframework.util.CollectionUtils;import org.springframework.util.StringUtils;import java.util.ArrayList;import java.util.List;/** * Configuration that enabled the lib-core-elasctic-jest module. * This annotation is descrbe in spring.factories file under src/mai/resources lib-core-elasctic-jest module. * Using this module, launch these configurations. */@Slf4j@Configuration@ConditionalOnClass(JestClient.class)@EnableConfigurationProperties({JestProperties.class, JacksonProperties.class})public class JestElasticsearchAutoConfiguration {    private final JestProperties jestProperties;    private final JacksonProperties jacksonProperties;    @Autowired(required = false)    private JestClientFactory jestClientFactory;    @Autowired(required = false)    private ObjectProvider<List<HttpClientConfigBuilderCustomizer>> builderCustomizers;    @Autowired    public JestElasticsearchAutoConfiguration(final JestProperties jestProperties, final JacksonProperties jacksonProperties) {        this.jestProperties = jestProperties;        this.jacksonProperties = jacksonProperties;    }    @Bean    @ConditionalOnMissingBean(JestClient.class)    public JestClient client() {        Assert.notEmpty(jestProperties.getUris(), "No elasticsearch uris defined");        List<String> uris = jestProperties.getUris();        HttpClientConfig.Builder builder = new HttpClientConfig.Builder(uris)                .connTimeout((int) jestProperties.getConnectionTimeout().toMillis())                .readTimeout((int) jestProperties.getReadTimeout().toMillis())                .multiThreaded(jestProperties.isMultiThreaded())                .gson(gsonMapper());        if (StringUtils.hasText(this.jestProperties.getUsername())) {            builder.defaultCredentials(this.jestProperties.getUsername(), this.jestProperties.getPassword());        }        String proxyHost = this.jestProperties.getProxy().getHost();        if (StringUtils.hasText(proxyHost)) {            Integer proxyPort = this.jestProperties.getProxy().getPort();            Assert.notNull(proxyPort, "Proxy port must not be null");            builder.proxy(new HttpHost(proxyHost, proxyPort));        }        List<HttpClientConfigBuilderCustomizer> configBuilderCustomizers = builderCustomizers != null ? builderCustomizers.getIfAvailable() : new ArrayList<>();        if (!CollectionUtils.isEmpty(configBuilderCustomizers)) {            if (log.isInfoEnabled()) {                log.info("Custom HttpClientConfigBuilderCustomizers detected. Applying these to the HttpClientConfig builder.");            }            configBuilderCustomizers.stream().forEach(customizer -> customizer.customize(builder));            if (log.isInfoEnabled()) {                log.info("Custom HttpClientConfigBuilderCustomizers applied.");            }        }        JestClientFactory factory = jestClientFactory != null ? jestClientFactory : new JestClientFactory();        factory.setHttpClientConfig(builder.build());        if (log.isInfoEnabled()) {            uris.forEach(uri -> log.info("New Elasticsearch host {} added", uri));        }        return factory.getObject();    }    /**     * @return     */    private Gson gsonMapper() {        GsonBuilder builder = new GsonBuilder();        TimeTypeAdapterRegistry.registerAll(builder);        if (jacksonProperties.getDateFormat() != null) {            builder.setDateFormat(jacksonProperties.getDateFormat());        } else {            builder.setDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSXXX");        }        return builder.create();    }}