package com.ydespreaux.shared.data.elasticsearch.core;import com.ydespreaux.shared.data.elasticsearch.ScrolledPage;import com.ydespreaux.shared.data.elasticsearch.core.converter.ElasticsearchConverter;import com.ydespreaux.shared.data.elasticsearch.core.mapping.ElasticsearchPersistentEntity;import com.ydespreaux.shared.data.elasticsearch.core.query.SearchQuery;import org.elasticsearch.action.search.SearchRequest;import org.elasticsearch.common.Nullable;import java.util.List;/** * define the {@link ElasticsearchOperations} methods. */public interface ElasticsearchOperations extends ElasticsearchAdminOperations {    /**     * Give the {@link ElasticsearchPersistentEntity} for the given {@link Class}.     *     * @param clazz the given {@link Class}.     * @return ElasticsearchPersistentEntity the persitant entity for the given {@link Class} parameter.     */    <T> ElasticsearchPersistentEntity<T> getPersistentEntityFor(Class<T> clazz);    /**     *     * @return     */    ElasticsearchConverter getElasticsearchConverter();    //***************************************    // Index / search operations    //***************************************    /**     * Index the given T entity, for the geiven clazz.     *     * @param entity the given entity.     * @param clazz  the gievn {@link Class}.     * @return T the indexed entity.     */    <T> T index(T entity, Class<T> clazz);    /**     * Bulk index operation for the given {@link List} of entities, and gievn {@link Class}.     *     * @param entities the given entities {@link List}.     * @param clazz    the given {@link Class}.     * @param <T>      the {@link List} of indexed entities.     * @return     */    <T> List<T> bulkIndex(List<T> entities, Class<T> clazz);    /**     * @param entities     * @return     */    List<?> bulkIndex(List<?> entities);    /**     * Find an elasticsearch document for the given clazz, and documentId.     *     * @param clazz      the given clazz.     * @param documentId the given documentId.     * @param <T>        the document     * @return the entity for the given documentId or null.     */    <T> T findById(Class<T> clazz, String documentId);    /**     *     * @param clazz     * @param documentId     * @param <T>     * @return     */    <T> Boolean existsById(Class<T> clazz, String documentId);    /**     * Delete all the documents for the given clazz     *     * @param clazz the given clazz.     * @param <T>   method generic.     */    <T> void deleteAll(Class<T> clazz);    /**     * Delete all the {@link List} of entities, for the given clazz.     *     * @param entities the {@link List} of entities.     * @param clazz    the given clazz.     * @param <T>      method generic.     */    <T> void deleteAll(List<T> entities, Class<T> clazz);    /**     * delete the document ofr the given entity, and clazz     *     * @param entity the given entity.     * @param clazz  the given clazz.     * @param <T>    method generic.     */    <T> void delete(T entity, Class<T> clazz);    /**     * delete the document with the given documentId and clazz.     *     * @param documentId the given documentId.     * @param clazz      the given clazz.     * @param <T>        method generic.     */    <T> void deleteById(String documentId, Class<T> clazz);    /**     * refresh the elasticsearch index for the given clazz     *     * @param clazz     the given clazz.     * @param <T>method generic.     */    <T> void refresh(Class<T> clazz);    /**     *     * @param indexName     * @param <T>     */    <T> void refresh(String indexName);    /**     * Search with the given {@link SearchRequest} search, and given {@link Class} clazz.     *     * @param search the given {@link SearchRequest} instance.     * @param clazz  the given clazz.     * @param <T>    generic method.     * @return a {@link List} of the method generic type.     */    <T> List<T> search(SearchQuery search, Class<T> clazz);    /**     * Start the {@link ScrolledPage}, with the given scrollTimeInMinutes, size, builder and clazz.     *     * @param scrollTimeInMinutes the scroll time in minutes.     * @param searchQuery             the given query.     * @param clazz               the given {@link Class} clazz.     * @param <T>                 method generic.     * @return a {@link ScrolledPage} of T instances.     */    <T> ScrolledPage<T> startScroll(long scrollTimeInMinutes, SearchQuery searchQuery, Class<T> clazz);    /**     *     * @param scrollTimeInMillis     * @param searchQuery     * @param clazz     * @param mapper     * @param <T>     * @return     */    <T> ScrolledPage<T> startScroll(long scrollTimeInMillis, SearchQuery searchQuery, Class<T> clazz, SearchResultMapper mapper);    /**     * Continue the {@link ScrolledPage} for the given scrollId, scrollTimeInMinutes, and clazz.     *     * @param scrollId            the given scrollId.     * @param scrollTimeInMinutes the scrol time in minutess.     * @param clazz               the given clazz.     * @param <T>                 method generic.     * @return a {@link ScrolledPage} of T instancess.     */    <T> ScrolledPage<T> continueScroll(@Nullable String scrollId, long scrollTimeInMinutes, Class<T> clazz);    /**     *     * @param scrollId     * @param scrollTimeInMinutes     * @param clazz     * @param mapper     * @param <T>     * @return     */    <T> ScrolledPage<T> continueScroll(@Nullable String scrollId, long scrollTimeInMinutes, Class<T> clazz, SearchResultMapper mapper);    /**     * Clear the {@link ScrolledPage} for the given scrollId.     *     * @param scrollId the given scrollId.     */    void clearScroll(String scrollId);}