package com.ydespreaux.shared.data.elasticsearch.support;import com.ydespreaux.shared.data.autoconfigure.elasticsearch.JestElasticsearchAutoConfiguration;import com.ydespreaux.shared.data.autoconfigure.elasticsearch.JestElasticsearchDataAutoConfiguration;import com.ydespreaux.shared.data.elasticsearch.ElasticsearchOperations;import com.ydespreaux.shared.data.elasticsearch.ScrolledPage;import com.ydespreaux.shared.data.elasticsearch.ScrolledPageable;import com.ydespreaux.shared.data.elasticsearch.configuration.ElasticsearchArticleConfiguration;import com.ydespreaux.shared.data.elasticsearch.entities.Article;import com.ydespreaux.shared.data.elasticsearch.repositories.ArticleRepository;import io.searchbox.client.JestResult;import io.searchbox.indices.template.GetTemplate;import org.elasticsearch.index.query.QueryBuilders;import org.junit.Before;import org.junit.Test;import org.junit.runner.RunWith;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.data.domain.Sort;import org.springframework.test.annotation.DirtiesContext;import org.springframework.test.context.junit4.SpringRunner;import java.util.ArrayList;import java.util.List;import java.util.Optional;import java.util.UUID;import java.util.concurrent.ExecutionException;import static org.hamcrest.Matchers.is;import static org.junit.Assert.*;@DirtiesContext@RunWith(SpringRunner.class)@SpringBootTest(classes = {JestElasticsearchAutoConfiguration.class, JestElasticsearchDataAutoConfiguration.class, ElasticsearchArticleConfiguration.class})public class ITArticleRepositoryTest {    @Autowired    private ArticleRepository repository;    @Autowired    private ElasticsearchOperations elasticsearchOperations;    @Before    public void setUp(){        this.repository.deleteAll();    }    @Test    public void findById() {        Article articleIndexed = indexArticle("Article1", "Description de l'article", Article.EnumEntrepot.E1);        this.repository.refresh();        Optional<Article> optionalArticle = this.repository.findById(articleIndexed.getDocumentId());        assertTrue(optionalArticle.isPresent());        Article articleLoaded = optionalArticle.get();        assertEquals(articleIndexed.getDocumentId(), articleLoaded.getDocumentId());        assertEquals(articleIndexed.getName(), articleLoaded.getName());        assertEquals(articleIndexed.getDescription(), articleLoaded.getDescription());        assertEquals(articleIndexed.getEntrepot(), articleLoaded.getEntrepot());        assertEquals(new Integer(1), articleLoaded.getDocumentVersion());    }    @Test    public void exists() {        Article articleIndexed = indexArticle("Article1", "Description de l'article", Article.EnumEntrepot.E1);        this.repository.refresh();        assertThat(this.repository.exists(articleIndexed.getDocumentId()), is(true));    }    @Test    public void notExists() {        Article articleIndexed = indexArticle("Article1", "Description de l'article", Article.EnumEntrepot.E1);        this.repository.refresh();        assertThat(this.repository.exists(UUID.randomUUID().toString()), is(false));    }    @Test    public void save() {        Article article = createArticle("Article1", "Description de l'article", Article.EnumEntrepot.E1);        Article articleIndexed =this.repository.save(article);        this.repository.refresh();        assertNotNull(articleIndexed.getDocumentId());        assertEquals(article.getName(), articleIndexed.getName());        assertEquals(article.getDescription(), articleIndexed.getDescription());        assertEquals(article.getEntrepot(), articleIndexed.getEntrepot());        assertEquals(new Integer(1), articleIndexed.getDocumentVersion());    }    @Test    public void save_bulk()  {        List<Article> articles = new ArrayList<>();        articles.add(createArticle("Article1", "Description de l'article 1", Article.EnumEntrepot.E1));        articles.add(createArticle("Article2", "Description de l'article 2", Article.EnumEntrepot.E2));        articles.add(createArticle("Article3", "Description de l'article 3", Article.EnumEntrepot.E1));        articles.add(createArticle("Article4", "Description de l'article 4", Article.EnumEntrepot.E3));        articles.add(createArticle("Article5", "Description de l'article 5", Article.EnumEntrepot.E1));        List<Article> articlesIndexed =this.repository.save(articles);        this.repository.refresh();        assertEquals(articles.size(), articlesIndexed.size());        for (Article articleIndexed : articlesIndexed) {            assertNotNull(articleIndexed.getDocumentId());            assertEquals(new Integer(1), articleIndexed.getDocumentVersion());        }    }    @Test    public void deleteById() throws ExecutionException {        Article articleIndexed = indexArticle("Article1", "Description de l'article", Article.EnumEntrepot.E1);        this.repository.refresh();        this.repository.deleteById(articleIndexed.getDocumentId());        this.repository.refresh();        Optional<Article> optionalArticle = this.repository.findById(articleIndexed.getDocumentId());        assertFalse(optionalArticle.isPresent());    }    @Test    public void delete() throws ExecutionException {        Article articleIndexed = indexArticle("Article1", "Description de l'article", Article.EnumEntrepot.E1);        this.repository.refresh();        this.repository.delete(articleIndexed);        this.repository.refresh();        Optional<Article> optionalArticle = this.repository.findById(articleIndexed.getDocumentId());        assertFalse(optionalArticle.isPresent());    }    @Test    public void deleteAll() throws ExecutionException {        List<Article> articles = new ArrayList<>();        articles.add(indexArticle("Article1", "Description de l'article 1", Article.EnumEntrepot.E1));        articles.add(indexArticle("Article2", "Description de l'article 2", Article.EnumEntrepot.E2));        articles.add(indexArticle("Article3", "Description de l'article 3", Article.EnumEntrepot.E3));        this.repository.refresh();        this.repository.deleteAll(articles);        this.repository.refresh();        for (Article articleIndexed : articles) {            Optional<Article> optionalArticle = this.repository.findById(articleIndexed.getDocumentId());            assertFalse(optionalArticle.isPresent());        }    }    @Test    public void searchByEntrepot_withoutSort(){        List<Article> articles = new ArrayList<>();        articles.add(indexArticle("Article1", "Description de l'article 1", Article.EnumEntrepot.E1));        articles.add(indexArticle("Article2", "Description de l'article 2", Article.EnumEntrepot.E2));        articles.add(indexArticle("Article3", "Description de l'article 3", Article.EnumEntrepot.E3));        articles.add(indexArticle("Article4", "Description de l'article 4", Article.EnumEntrepot.E1));        articles.add(indexArticle("Article5", "Description de l'article 5", Article.EnumEntrepot.E1));        this.repository.refresh();        List<Article> result = this.repository.search(QueryBuilders.matchQuery("entrepot", "E1"), (Sort)null);        assertEquals(3, result.size());        for (Article article : result) {            assertNotNull(article.getDocumentId());            assertNotNull(article.getDocumentVersion());        }    }    @Test    public void searchByEntrepot_withSort(){        List<Article> articles = new ArrayList<>();        articles.add(indexArticle("Article5", "Description de l'article 5", Article.EnumEntrepot.E1));        articles.add(indexArticle("Article1", "Description de l'article 1", Article.EnumEntrepot.E1));        articles.add(indexArticle("Article4", "Description de l'article 4", Article.EnumEntrepot.E1));        articles.add(indexArticle("Article2", "Description de l'article 2", Article.EnumEntrepot.E2));        articles.add(indexArticle("Article3", "Description de l'article 3", Article.EnumEntrepot.E3));        this.repository.refresh();        List<Article> result = this.repository.search(QueryBuilders.matchQuery("entrepot", "E1"), Sort.by(Sort.Direction.DESC, "name"));        assertEquals(3, result.size());        for (Article article : result) {            assertNotNull(article.getDocumentId());            assertNotNull(article.getDocumentVersion());        }        assertEquals("Article5", result.get(0).getName());        assertEquals("Article4", result.get(1).getName());        assertEquals("Article1", result.get(2).getName());    }    @Test    public void searchByDescription_withSort(){        List<Article> articles = new ArrayList<>();        articles.add(indexArticle("Article5", "Description de l'article 5", Article.EnumEntrepot.E1));        articles.add(indexArticle("Article1", "Description de l'article 1", Article.EnumEntrepot.E1));        articles.add(indexArticle("Article4", "Description de l'article 4", Article.EnumEntrepot.E1));        articles.add(indexArticle("Article2", "Description de l'article 2", Article.EnumEntrepot.E2));        articles.add(indexArticle("Article3", "Description de l'article 3", Article.EnumEntrepot.E3));        this.repository.refresh();        List<Article> result = this.repository.search(QueryBuilders.matchPhraseQuery("description", "Description"), Sort.by(Sort.Direction.ASC, "name"));        assertEquals(5, result.size());        for (Article article : result) {            assertNotNull(article.getDocumentId());            assertNotNull(article.getDocumentVersion());        }        assertEquals("Article1", result.get(0).getName());        assertEquals("Article2", result.get(1).getName());        assertEquals("Article3", result.get(2).getName());        assertEquals("Article4", result.get(3).getName());        assertEquals("Article5", result.get(4).getName());    }    @Test    public void searchByDescription_withScroll() {        List<Article> articles = new ArrayList<>();        articles.add(indexArticle("Article5", "Description de l'article 5", Article.EnumEntrepot.E1));        articles.add(indexArticle("Article1", "Description de l'article 1", Article.EnumEntrepot.E1));        articles.add(indexArticle("Article4", "Description de l'article 4", Article.EnumEntrepot.E1));        articles.add(indexArticle("Article2", "Description de l'article 2", Article.EnumEntrepot.E2));        articles.add(indexArticle("Article3", "Description de l'article 3", Article.EnumEntrepot.E3));        this.repository.refresh();        ScrolledPageable pageable = ScrolledPageable.of(2, Sort.by(Sort.Direction.ASC, "name"));        pageable.setScrollTimeInMinutes(1);        ScrolledPage<Article> result = this.repository.search(QueryBuilders.matchAllQuery(), pageable);        String scrollId = result.getScrollId();        assertNotNull(scrollId);        assertEquals(new Integer(5), result.getTotalElements());        assertEquals(2, result.getContent().size());        assertEquals("Article1", result.getContent().get(0).getName());        assertEquals("Article2", result.getContent().get(1).getName());        pageable.setScrollId(scrollId);        result = this.repository.search(pageable);        assertEquals(new Integer(5), result.getTotalElements());        assertEquals(2, result.getContent().size());        assertEquals("Article3", result.getContent().get(0).getName());        assertEquals("Article4", result.getContent().get(1).getName());        result = this.repository.search(pageable);        assertEquals(new Integer(5), result.getTotalElements());        assertEquals(1, result.getContent().size());        assertEquals("Article5", result.getContent().get(0).getName());        result = this.repository.search(pageable);        assertEquals(new Integer(5), result.getTotalElements());        assertEquals(0, result.getContent().size());    }    @Test    public void searchByAllFields_1_withSort(){        List<Article> articles = new ArrayList<>();        articles.add(indexArticle("Blake et Mortimer - Tome 25 : La vallée des immortels", "À Lhassa, le palais impérial du dictateur Basam-Damdu est anéanti par une escadrille d’Espadons, et le monde, soulagé, fête la fin de la troisième guerre mondiale...", Article.EnumEntrepot.E1));        articles.add(indexArticle("Et puis Colette", "Anouk, trentenaire parisienne enfermée dans la routine, vient d’apprendre le décès de sa soeur...", Article.EnumEntrepot.E1));        articles.add(indexArticle("Live Is love Double Vinyle", "Thomas s’est pour ce disque mis à nu, sans concession aucune...", Article.EnumEntrepot.E2));        articles.add(indexArticle("Black City Parade", "Exceptionnel : pour la 1ère fois ! Indochine records et Sony Music sont fiers de proposer les rééditions des 12 albums studio d’Indochine...", Article.EnumEntrepot.E2));        this.repository.refresh();        List<Article> result = this.repository.search(QueryBuilders.matchPhraseQuery("search_fieds", "City"), Sort.by(Sort.Direction.ASC, "name"));        assertEquals(1, result.size());        for (Article article : result) {            assertNotNull(article.getDocumentId());            assertNotNull(article.getDocumentVersion());        }        assertEquals("Black City Parade", result.get(0).getName());    }    @Test    public void searchByAllFields_2_withSort(){        List<Article> articles = new ArrayList<>();        articles.add(indexArticle("Black City Parade", "Exceptionnel : pour la 1ère fois ! Indochine records et Sony Music sont fiers de proposer les rééditions des 12 albums studio d’Indochine...", Article.EnumEntrepot.E2));        articles.add(indexArticle("Blake et Mortimer - Tome 25 : La vallée des immortels", "À Lhassa, le palais impérial du dictateur Basam-Damdu est anéanti par une escadrille d’Espadons, et le monde, soulagé, fête la fin de la troisième guerre mondiale...", Article.EnumEntrepot.E1));        articles.add(indexArticle("Et puis Colette", "Anouk, trentenaire parisienne enfermée dans la routine, vient d’apprendre le décès de sa soeur...", Article.EnumEntrepot.E1));        articles.add(indexArticle("Live Is love Double Vinyle", "Thomas s’est pour ce disque mis à nu, sans concession aucune...", Article.EnumEntrepot.E2));        this.repository.refresh();        List<Article> result = this.repository.search(QueryBuilders.matchPhraseQuery("search_fieds", "E2"), Sort.by(Sort.Direction.ASC, "name"));        assertEquals(2, result.size());        for (Article article : result) {            assertNotNull(article.getDocumentId());            assertNotNull(article.getDocumentVersion());        }        assertEquals("Black City Parade", result.get(0).getName());        assertEquals("Live Is love Double Vinyle", result.get(1).getName());    }    /**     *     * @param name     * @param description     * @param entrepot     * @return     */    private Article createArticle(String name, String description, Article.EnumEntrepot entrepot) {        return Article.builder()                .name(name)                .description(description)                .entrepot(entrepot)                .build();    }    private Article indexArticle(String name, String description, Article.EnumEntrepot entrepot) {        return this.elasticsearchOperations.index(createArticle(name, description, entrepot), Article.class);    }    private JestResult getTemplate(String templateName)  {        return elasticsearchOperations.execute(new GetTemplate.Builder(templateName).build());    }}