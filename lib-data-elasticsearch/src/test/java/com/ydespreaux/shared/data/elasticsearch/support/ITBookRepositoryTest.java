package com.ydespreaux.shared.data.elasticsearch.support;import com.ydespreaux.shared.data.autoconfigure.elasticsearch.ElasticsearchDataAutoConfiguration;import com.ydespreaux.shared.data.elasticsearch.ElasticsearchOperations;import com.ydespreaux.shared.data.elasticsearch.ScrolledPage;import com.ydespreaux.shared.data.elasticsearch.ScrolledPageable;import com.ydespreaux.shared.data.elasticsearch.configuration.ElasticsearchBookConfiguration;import com.ydespreaux.shared.data.elasticsearch.entities.Book;import com.ydespreaux.shared.data.elasticsearch.repositories.BookRepository;import org.elasticsearch.index.query.QueryBuilders;import org.junit.Before;import org.junit.Test;import org.junit.runner.RunWith;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.autoconfigure.elasticsearch.rest.RestClientAutoConfiguration;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.data.domain.Sort;import org.springframework.test.annotation.DirtiesContext;import org.springframework.test.context.junit4.SpringRunner;import java.time.Clock;import java.time.LocalDate;import java.time.LocalDateTime;import java.util.ArrayList;import java.util.List;import java.util.Optional;import java.util.UUID;import java.util.concurrent.ExecutionException;import static org.hamcrest.Matchers.*;import static org.junit.Assert.assertThat;import static org.junit.Assert.assertTrue;@DirtiesContext@RunWith(SpringRunner.class)@SpringBootTest(classes = {        RestClientAutoConfiguration.class,        ElasticsearchDataAutoConfiguration.class,        ElasticsearchBookConfiguration.class})public class ITBookRepositoryTest {    @Autowired    private BookRepository repository;    @Autowired    private ElasticsearchOperations elasticsearchOperations;    @Before    public void setUp(){        this.repository.deleteAll();    }    @Test    public void findById() {        Book bookIndexed = indexBook("Livre1", "Description du livre 1", 10.5d, LocalDate.now(Clock.systemUTC()));        this.repository.refresh();        Optional<Book> optionalBook = this.repository.findById(bookIndexed.getDocumentId());        assertTrue(optionalBook.isPresent());        Book bookLoaded = optionalBook.get();        assertThat(bookLoaded.getDocumentId(), is(equalTo(bookIndexed.getDocumentId())));        assertThat(bookLoaded.getTitle(), is(equalTo(bookIndexed.getTitle())));        assertThat(bookLoaded.getDescription(), is(equalTo(bookIndexed.getDescription())));        assertThat(bookLoaded.getPrice(), is(equalTo(bookIndexed.getPrice())));        assertThat(bookLoaded.getPublication(), is(equalTo(bookIndexed.getPublication())));        assertThat(bookLoaded.getVersion(), is(equalTo(1L)));    }    @Test    public void findByIdNotFound() {        Optional<Book> optionalBook = this.repository.findById(UUID.randomUUID().toString());        assertThat(optionalBook.isPresent(), is(false));    }    @Test    public void existsById() {        Book bookIndexed = indexBook("Livre1", "Description du livre 1", 10.5d, LocalDate.now(Clock.systemUTC()));        this.repository.refresh();        assertThat(this.repository.existsById(bookIndexed.getDocumentId()), is(true));    }    @Test    public void notExistsById() {        Book bookIndexed = indexBook("Livre1", "Description du livre 1", 10.5d, LocalDate.now(Clock.systemUTC()));        this.repository.refresh();        assertThat(this.repository.existsById(UUID.randomUUID().toString()), is(false));    }    @Test    public void save() {        Book book = createBook("Livre1", "Description du livre 1", 10.5d, LocalDate.now(Clock.systemUTC()));        Book bookIndexed = this.repository.save(book);        this.repository.refresh();        assertThat(bookIndexed.getTitle(), is(equalTo(book.getTitle())));        assertThat(bookIndexed.getDescription(), is(equalTo(book.getDescription())));        assertThat(bookIndexed.getPrice(), is(equalTo(book.getPrice())));        assertThat(bookIndexed.getPublication(), is(equalTo(book.getPublication())));        assertThat(bookIndexed.getVersion(), is(equalTo(1L)));    }    @Test    public void save_bulk()  {        List<Book> books = new ArrayList<>();        books.add(createBook("Livre1", "Description du livre 1", 10.5d, LocalDate.now(Clock.systemUTC())));        books.add(createBook("Livre2", "Description du livre 2", 8d, LocalDate.now(Clock.systemUTC())));        books.add(createBook("Livre3", "Description du livre 3", 20d, LocalDate.now(Clock.systemUTC())));        books.add(createBook("Livre4", "Description du livre 4", 5d, LocalDate.now(Clock.systemUTC())));        books.add(createBook("Livre5", "Description du livre 5", 8.5d, LocalDate.now(Clock.systemUTC())));        List<Book> booksIndexed =this.repository.save(books);        this.repository.refresh();        assertThat(booksIndexed.size(), is(equalTo(books.size())));        for (Book bookIndexed : booksIndexed) {            assertThat(bookIndexed.getDocumentId(), is(notNullValue()));            assertThat(bookIndexed.getVersion(), is(equalTo(1L)));        }    }    @Test    public void deleteById() throws ExecutionException {        Book bookIndexed = indexBook("Livre1", "Description du livre 1", 10.5d, LocalDate.now(Clock.systemUTC()));        this.repository.refresh();        this.repository.deleteById(bookIndexed.getDocumentId());        this.repository.refresh();        Optional<Book> optional = this.repository.findById(bookIndexed.getDocumentId());        assertThat(optional.isPresent(), is(false));    }    @Test    public void delete() throws ExecutionException {        Book bookIndexed = indexBook("Livre1", "Description du livre 1", 10.5d, LocalDate.now(Clock.systemUTC()));        this.repository.refresh();        this.repository.delete(bookIndexed);        this.repository.refresh();        Optional<Book> optional = this.repository.findById(bookIndexed.getDocumentId());        assertThat(optional.isPresent(), is(false));    }    @Test    public void deleteAll() throws ExecutionException {        List<Book> books = new ArrayList<>();        books.add(indexBook("Livre1", "Description du livre 1", 10.5d, LocalDate.now(Clock.systemUTC())));        books.add(indexBook("Livre2", "Description du livre 2", 10.5d, LocalDate.now(Clock.systemUTC())));        books.add(indexBook("Livre3", "Description du livre 3", 10.5d, LocalDate.now(Clock.systemUTC())));        this.repository.refresh();        this.repository.deleteAll(books);        this.repository.refresh();        for (Book bookIndexed : books) {            Optional<Book> optional = this.repository.findById(bookIndexed.getDocumentId());            assertThat(optional.isPresent(), is(false));        }    }    @Test    public void searchByPrice_withoutSort(){        List<Book> books = new ArrayList<>();        books.add(indexBook("Livre1", "Description du livre 1", 5d, LocalDate.now(Clock.systemUTC())));        books.add(indexBook("Livre2", "Description du livre 2", 8d, LocalDate.now(Clock.systemUTC())));        books.add(indexBook("Livre3", "Description du livre 3", 12.5d, LocalDate.now(Clock.systemUTC())));        books.add(indexBook("Livre4", "Description du livre 4", 20d, LocalDate.now(Clock.systemUTC())));        books.add(indexBook("Livre5", "Description du livre 5", 6d, LocalDate.now(Clock.systemUTC())));        this.repository.refresh();        List<Book> result = this.repository.search(QueryBuilders.rangeQuery("price").from(5).to(10), (Sort)null);        assertThat(result.size(), is(equalTo(3)));        for (Book book : result) {            assertThat(book.getDocumentId(), is(notNullValue()));            assertThat(book.getVersion(), is(notNullValue()));        }    }    @Test    public void searchByPrice_withSort(){        List<Book> books = new ArrayList<>();        books.add(indexBook("Livre1", "Description du livre 1", 5d, LocalDate.now(Clock.systemUTC())));        books.add(indexBook("Livre2", "Description du livre 2", 8d, LocalDate.now(Clock.systemUTC())));        books.add(indexBook("Livre3", "Description du livre 3", 12.5d, LocalDate.now(Clock.systemUTC())));        books.add(indexBook("Livre4", "Description du livre 4", 20d, LocalDate.now(Clock.systemUTC())));        books.add(indexBook("Livre5", "Description du livre 5", 6d, LocalDate.now(Clock.systemUTC())));        this.repository.refresh();        List<Book> result = this.repository.search(QueryBuilders.rangeQuery("price").from(5).to(10), Sort.by(Sort.Direction.DESC, "price"));        assertThat(result.size(), is(equalTo(3)));        for (Book book : result) {            assertThat(book.getDocumentId(), is(notNullValue()));            assertThat(book.getVersion(), is(notNullValue()));        }        assertThat(result.get(0).getTitle(), is(equalTo("Livre2")));        assertThat(result.get(1).getTitle(), is(equalTo("Livre5")));        assertThat(result.get(2).getTitle(), is(equalTo("Livre1")));    }    @Test    public void searchByTitle_withScroll() {        List<Book> books = new ArrayList<>();        books.add(indexBook("Livre1", "Description du livre 1", 5d, LocalDate.now(Clock.systemUTC())));        books.add(indexBook("Livre2", "Description du livre 2", 8d, LocalDate.now(Clock.systemUTC())));        books.add(indexBook("Livre3", "Description du livre 3", 12.5d, LocalDate.now(Clock.systemUTC())));        books.add(indexBook("Livre4", "Description du livre 4", 20d, LocalDate.now(Clock.systemUTC())));        books.add(indexBook("Livre5", "Description du livre 5", 6d, LocalDate.now(Clock.systemUTC())));        this.repository.refresh();        ScrolledPageable pageable = ScrolledPageable.of(2, Sort.by(Sort.Direction.ASC, "title"));        pageable.setScrollTimeInMinutes(1);        ScrolledPage<Book> result = this.repository.search(QueryBuilders.matchAllQuery(), pageable);        String scrollId = result.getScrollId();        assertThat(scrollId, is(notNullValue()));        assertThat(result.getTotalElements(), is(equalTo(5L)));        assertThat(result.getContent().size(), is(equalTo(2)));        assertThat(result.getContent().get(0).getTitle(), is(equalTo("Livre1")));        assertThat(result.getContent().get(1).getTitle(), is(equalTo("Livre2")));        pageable.setScrollId(scrollId);        result = this.repository.search(pageable);        assertThat(result.getTotalElements(), is(equalTo(5L)));        assertThat(result.getContent().size(), is(equalTo(2)));        assertThat(result.getContent().get(0).getTitle(), is(equalTo("Livre3")));        assertThat(result.getContent().get(1).getTitle(), is(equalTo("Livre4")));        result = this.repository.search(pageable);        assertThat(result.getTotalElements(), is(equalTo(5L)));        assertThat(result.getContent().size(), is(equalTo(1)));        assertThat(result.getContent().get(0).getTitle(), is(equalTo("Livre5")));        result = this.repository.search(pageable);        assertThat(result.getTotalElements(), is(equalTo(5L)));        assertThat(result.getContent().size(), is(equalTo(0)));    }    /**     *     * @param title     * @param description     * @param price     * @return     */    private Book createBook(String title, String description, Double price, LocalDate publication) {        return Book.builder()                .title(title)                .description(description)                .price(price)                .publication(publication)                .lastUpdated(LocalDateTime.now(Clock.systemUTC()))                .build();    }    private Book indexBook(String title, String description, Double price, LocalDate publication) {        return this.elasticsearchOperations.index(createBook(title, description, price, publication), Book.class);    }}