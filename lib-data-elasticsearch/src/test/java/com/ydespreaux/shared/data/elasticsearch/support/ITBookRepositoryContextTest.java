package com.ydespreaux.shared.data.elasticsearch.support;import com.google.gson.JsonObject;import com.ydespreaux.shared.data.autoconfigure.elasticsearch.JestElasticsearchAutoConfiguration;import com.ydespreaux.shared.data.autoconfigure.elasticsearch.JestElasticsearchDataAutoConfiguration;import com.ydespreaux.shared.data.elasticsearch.ElasticsearchOperations;import com.ydespreaux.shared.data.elasticsearch.configuration.ElasticsearchBookConfiguration;import io.searchbox.client.JestClient;import io.searchbox.client.JestResult;import io.searchbox.indices.mapping.GetMapping;import io.searchbox.indices.settings.GetSettings;import org.hamcrest.Matchers;import org.junit.Test;import org.junit.runner.RunWith;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.test.annotation.DirtiesContext;import org.springframework.test.context.junit4.SpringRunner;import static org.junit.Assert.*;@DirtiesContext@RunWith(SpringRunner.class)@SpringBootTest(classes = {JestElasticsearchAutoConfiguration.class, JestElasticsearchDataAutoConfiguration.class, ElasticsearchBookConfiguration.class})public class ITBookRepositoryContextTest {    private static final String INDEX_BOOK_NAME = "books";    @Autowired    private ElasticsearchOperations elasticsearchOperations;    @Autowired    private JestClient client;    @Test    public void context() throws Exception{        assertThat(this.elasticsearchOperations.indexExists(INDEX_BOOK_NAME), Matchers.is(true));        GetMapping getMapping = new GetMapping.Builder().build();        JestResult result = client.execute(getMapping);        assertTrue(result.getErrorMessage(), result.isSucceeded());        JsonObject mapping = result.getJsonObject().getAsJsonObject(INDEX_BOOK_NAME);        assertNotNull("GetMapping response JSON should include the index " + INDEX_BOOK_NAME, mapping);        JsonObject indexMapping = mapping.getAsJsonObject("mappings");        assertNotNull(indexMapping.get("book"));        GetSettings getSettings = new GetSettings.Builder().build();        result = client.execute(getSettings);        assertTrue(result.isSucceeded());        JsonObject settings = result.getJsonObject();        assertNotNull(settings.getAsJsonObject(INDEX_BOOK_NAME));        assertNotNull(settings.getAsJsonObject(INDEX_BOOK_NAME).getAsJsonObject("settings"));        JsonObject indexSettings = settings.getAsJsonObject(INDEX_BOOK_NAME).getAsJsonObject("settings").getAsJsonObject("index");        assertEquals("1s", indexSettings.get("refresh_interval").getAsString());        assertEquals("1", indexSettings.get("number_of_shards").getAsString());        assertEquals("1", indexSettings.get("number_of_replicas").getAsString());        assertEquals("fs", indexSettings.getAsJsonObject("store").get("type").getAsString());    }}