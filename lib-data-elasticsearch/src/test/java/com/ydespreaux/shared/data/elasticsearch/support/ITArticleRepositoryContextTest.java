package com.ydespreaux.shared.data.elasticsearch.support;import com.ydespreaux.shared.data.autoconfigure.elasticsearch.ElasticsearchDataAutoConfiguration;import com.ydespreaux.shared.data.elasticsearch.ElasticsearchOperations;import com.ydespreaux.shared.data.elasticsearch.configuration.ElasticsearchArticleConfiguration;import com.ydespreaux.shared.data.elasticsearch.entities.ArticleTimeBasedSupport;import com.ydespreaux.shared.data.elasticsearch.mapping.IndexTimeBasedParameter;import com.ydespreaux.shared.data.elasticsearch.utils.AdminClientUtils;import org.elasticsearch.client.RestHighLevelClient;import org.elasticsearch.cluster.metadata.IndexTemplateMetaData;import org.elasticsearch.common.settings.Settings;import org.hamcrest.Matchers;import org.junit.Test;import org.junit.runner.RunWith;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.autoconfigure.elasticsearch.rest.RestClientAutoConfiguration;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.test.annotation.DirtiesContext;import org.springframework.test.context.junit4.SpringRunner;import java.util.Date;import static org.hamcrest.Matchers.equalTo;import static org.hamcrest.Matchers.notNullValue;import static org.hamcrest.core.Is.is;import static org.junit.Assert.assertThat;@DirtiesContext@RunWith(SpringRunner.class)@SpringBootTest(classes = {        RestClientAutoConfiguration.class,        ElasticsearchDataAutoConfiguration.class,        ElasticsearchArticleConfiguration.class})public class ITArticleRepositoryContextTest {    @Autowired    private RestHighLevelClient client;    @Autowired    private ElasticsearchOperations elasticsearchOperations;    @Test    public void context() throws Exception{        IndexTemplateMetaData template = AdminClientUtils.getTemplate(client, "article");        assertThat(template, Matchers.is(notNullValue()));        assertThat(template.getName(), Matchers.is(equalTo("article")));        assertThat(template.getPatterns().size(), Matchers.is(equalTo(1)));        assertThat(template.getPatterns().get(0), Matchers.is(equalTo("article-*")));        Settings settings = template.getSettings();        assertThat(settings, Matchers.is(notNullValue()));        assertThat(settings.get("index.refresh_interval"), Matchers.is(equalTo("1s")));        assertThat(settings.get("index.number_of_shards"), Matchers.is(equalTo("1")));        assertThat(settings.get("index.number_of_replicas"), Matchers.is(equalTo("1")));        assertThat(settings.get("index.store.type"), Matchers.is(equalTo("fs")));        assertThat(template.getAliases().containsKey("articles"), Matchers.is(true));        assertThat(template.getMappings().containsKey("article"), Matchers.is(true));        //        ArticleTimeBasedSupport timeBased = new ArticleTimeBasedSupport();        String indexName = timeBased.buildIndex(IndexTimeBasedParameter.of("'article-%s-'yyyy", new Date()));        assertThat(this.elasticsearchOperations.indexExists(indexName), is(true));    }}