package com.ydespreaux.shared.data.elasticsearch.support;import com.google.gson.JsonObject;import com.ydespreaux.shared.data.autoconfigure.elasticsearch.JestElasticsearchAutoConfiguration;import com.ydespreaux.shared.data.autoconfigure.elasticsearch.JestElasticsearchDataAutoConfiguration;import com.ydespreaux.shared.data.elasticsearch.ElasticsearchOperations;import com.ydespreaux.shared.data.elasticsearch.configuration.ElasticsearchArticleConfiguration;import com.ydespreaux.shared.data.elasticsearch.entities.ArticleTimeBasedSupport;import com.ydespreaux.shared.data.elasticsearch.mapping.IndexTimeBasedParameter;import io.searchbox.client.JestResult;import io.searchbox.indices.template.GetTemplate;import org.junit.Test;import org.junit.runner.RunWith;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.test.annotation.DirtiesContext;import org.springframework.test.context.junit4.SpringRunner;import java.util.Date;import static org.hamcrest.core.Is.is;import static org.junit.Assert.*;@DirtiesContext@RunWith(SpringRunner.class)@SpringBootTest(classes = {JestElasticsearchAutoConfiguration.class, JestElasticsearchDataAutoConfiguration.class, ElasticsearchArticleConfiguration.class})public class ITArticleRepositoryContextTest {    @Autowired    private ElasticsearchOperations elasticsearchOperations;    @Test    public void context() throws Exception{        JestResult response = getTemplate("article");        assertTrue(response.isSucceeded());        JsonObject json = response.getJsonObject();        JsonObject template = json.getAsJsonObject("article");        assertNotNull(template);        assertEquals("article-*", template.get("index_patterns").getAsString());        JsonObject indexSettings = template.getAsJsonObject("settings").getAsJsonObject("index");        assertEquals("1s", indexSettings.get("refresh_interval").getAsString());        assertEquals("1", indexSettings.get("number_of_shards").getAsString());        assertEquals("1", indexSettings.get("number_of_replicas").getAsString());        assertEquals("fs", indexSettings.getAsJsonObject("store").get("type").getAsString());        assertNotNull(template.getAsJsonObject("mappings"));        assertNotNull(template.getAsJsonObject("aliases").get("articles"));        //        ArticleTimeBasedSupport timeBased = new ArticleTimeBasedSupport();        String indexName = timeBased.buildIndex(IndexTimeBasedParameter.of("'article-%s-'yyyy", new Date()));        assertThat(this.elasticsearchOperations.indexExists(indexName), is(true));    }    private JestResult getTemplate(String templateName)  {        return elasticsearchOperations.execute(new GetTemplate.Builder(templateName).build());    }}