package com.ydespreaux.shared.data.elasticsearch;import com.ydespreaux.shared.data.autoconfigure.elasticsearch.ElasticsearchDataAutoConfiguration;import com.ydespreaux.shared.data.elasticsearch.configuration.ElasticsearchArticleConfiguration;import com.ydespreaux.shared.data.elasticsearch.configuration.ElasticsearchBookConfiguration;import com.ydespreaux.shared.data.elasticsearch.entities.Article;import com.ydespreaux.shared.data.elasticsearch.entities.Book;import com.ydespreaux.shared.data.elasticsearch.utils.AdminClientUtils;import org.elasticsearch.action.admin.indices.mapping.get.GetMappingsRequest;import org.elasticsearch.action.admin.indices.mapping.get.GetMappingsResponse;import org.elasticsearch.action.admin.indices.settings.get.GetSettingsRequest;import org.elasticsearch.action.admin.indices.settings.get.GetSettingsResponse;import org.elasticsearch.client.RequestOptions;import org.elasticsearch.client.RestHighLevelClient;import org.elasticsearch.cluster.metadata.IndexTemplateMetaData;import org.elasticsearch.cluster.metadata.MappingMetaData;import org.elasticsearch.common.collect.ImmutableOpenMap;import org.elasticsearch.common.settings.Settings;import org.junit.Before;import org.junit.Test;import org.junit.runner.RunWith;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.autoconfigure.elasticsearch.rest.RestClientAutoConfiguration;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.test.annotation.DirtiesContext;import org.springframework.test.context.junit4.SpringRunner;import java.io.IOException;import java.util.ArrayList;import java.util.List;import static org.hamcrest.Matchers.*;import static org.junit.Assert.*;@DirtiesContext@RunWith(SpringRunner.class)@SpringBootTest(classes = {        RestClientAutoConfiguration.class,        ElasticsearchDataAutoConfiguration.class,        ElasticsearchBookConfiguration.class,        ElasticsearchArticleConfiguration.class})public class ITElasticsearchTemplateTest {    private static final String DEFAULT_TEMPLATE_NAME = "junit-template";    private static final String DEFAULT_TEMPLATE_URL = "classpath:templates/junit.template";    private static final String UPDATE_TEMPLATE_URL = "classpath:templates/junit-update.template";    private static final String INDEX1_NAME = "index1";    private static final String INDEX_BOOK_PATH = "classpath:indices/book.index";    private static final String INDEX_BOOK_NAME = "books";    @Autowired    private ElasticsearchOperations operations;    @Autowired    private RestHighLevelClient client;    @Before    public void initialize() {        this.operations.deleteTemplate(DEFAULT_TEMPLATE_NAME);        this.operations.deleteIndexByName(INDEX1_NAME);        this.operations.deleteIndexByName(INDEX_BOOK_NAME);    }    @Test    public void createTemplate() throws IOException {        this.operations.createTemplate(DEFAULT_TEMPLATE_NAME, DEFAULT_TEMPLATE_URL, false);        IndexTemplateMetaData template = AdminClientUtils.getTemplate(client, DEFAULT_TEMPLATE_NAME);        assertThat(template, is(notNullValue()));        assertThat(template.getName(), is(equalTo("junit-template")));        assertThat(template.getPatterns().size(), is(equalTo(1)));        assertThat(template.getPatterns().get(0), is(equalTo("junit-*")));        Settings settings = template.getSettings();        assertThat(settings, is(notNullValue()));        assertThat(settings.get("index.refresh_interval"), is(equalTo("1s")));        assertThat(settings.get("index.number_of_shards"), is(equalTo("1")));        assertThat(settings.get("index.number_of_replicas"), is(equalTo("1")));        assertThat(settings.get("index.store.type"), is(equalTo("fs")));        assertThat(template.getAliases().containsKey("junit-alias"), is(true));        assertThat(template.getMappings().containsKey("tweet"), is(true));    }    @Test    public void updateTemplate_whenTemplateExists_withCreateOnly() throws IOException {        // Create template        this.operations.createTemplate(DEFAULT_TEMPLATE_NAME, DEFAULT_TEMPLATE_URL, false);        IndexTemplateMetaData templateInserted = AdminClientUtils.getTemplate(client, DEFAULT_TEMPLATE_NAME);        assertThat(templateInserted, is(notNullValue()));        assertThat(templateInserted.getName(), is(equalTo("junit-template")));        assertThat(templateInserted.getPatterns().size(), is(equalTo(1)));        assertThat(templateInserted.getPatterns().get(0), is(equalTo("junit-*")));        Settings settings = templateInserted.getSettings();        assertThat(settings, is(notNullValue()));        assertThat(settings.get("index.refresh_interval"), is(equalTo("1s")));        assertThat(settings.get("index.number_of_shards"), is(equalTo("1")));        assertThat(settings.get("index.number_of_replicas"), is(equalTo("1")));        assertThat(settings.get("index.store.type"), is(equalTo("fs")));        assertThat(templateInserted.getAliases().containsKey("junit-alias"), is(true));        assertThat(templateInserted.getMappings().containsKey("tweet"), is(true));        // Update template        this.operations.createTemplate(DEFAULT_TEMPLATE_NAME, UPDATE_TEMPLATE_URL, true);        IndexTemplateMetaData templateUpdated = AdminClientUtils.getTemplate(client, DEFAULT_TEMPLATE_NAME);        assertThat(templateUpdated, is(notNullValue()));        assertThat(templateUpdated.getName(), is(equalTo("junit-template")));        assertThat(templateUpdated.getPatterns().size(), is(equalTo(1)));        assertThat(templateUpdated.getPatterns().get(0), is(equalTo("junit-*")));        settings = templateUpdated.getSettings();        assertThat(settings, is(notNullValue()));        assertThat(settings.get("index.refresh_interval"), is(equalTo("1s")));        assertThat(settings.get("index.number_of_shards"), is(equalTo("1")));        assertThat(settings.get("index.number_of_replicas"), is(equalTo("1")));        assertThat(settings.get("index.store.type"), is(equalTo("fs")));        assertThat(templateUpdated.getAliases().containsKey("junit-alias"), is(true));        assertThat(templateUpdated.getMappings().containsKey("tweet"), is(true));    }    @Test    public void updateTemplate_whenTemplateExists() throws IOException {        // Create template        this.operations.createTemplate(DEFAULT_TEMPLATE_NAME, DEFAULT_TEMPLATE_URL, false);        IndexTemplateMetaData templateInserted = AdminClientUtils.getTemplate(client, DEFAULT_TEMPLATE_NAME);        assertThat(templateInserted, is(notNullValue()));        assertThat(templateInserted.getName(), is(equalTo("junit-template")));        assertThat(templateInserted.getPatterns().size(), is(equalTo(1)));        assertThat(templateInserted.getPatterns().get(0), is(equalTo("junit-*")));        Settings settings = templateInserted.getSettings();        assertThat(settings, is(notNullValue()));        assertThat(settings.get("index.refresh_interval"), is(equalTo("1s")));        assertThat(settings.get("index.number_of_shards"), is(equalTo("1")));        assertThat(settings.get("index.number_of_replicas"), is(equalTo("1")));        assertThat(settings.get("index.store.type"), is(equalTo("fs")));        assertThat(templateInserted.getAliases().containsKey("junit-alias"), is(true));        assertThat(templateInserted.getMappings().containsKey("tweet"), is(true));        // Update template        this.operations.createTemplate(DEFAULT_TEMPLATE_NAME, UPDATE_TEMPLATE_URL, false);        IndexTemplateMetaData templateUpdated = AdminClientUtils.getTemplate(client, DEFAULT_TEMPLATE_NAME);        assertThat(templateUpdated, is(notNullValue()));        assertThat(templateUpdated.getName(), is(equalTo("junit-template")));        assertThat(templateUpdated.getPatterns().size(), is(equalTo(1)));        assertThat(templateUpdated.getPatterns().get(0), is(equalTo("junit-*")));        settings = templateUpdated.getSettings();        assertThat(settings, is(notNullValue()));        assertThat(settings.get("index.refresh_interval"), is(equalTo("1s")));        assertThat(settings.get("index.number_of_shards"), is(equalTo("2")));        assertThat(settings.get("index.number_of_replicas"), is(equalTo("1")));        assertThat(settings.get("index.store.type"), is(equalTo("fs")));        assertThat(templateUpdated.getAliases().containsKey("junit-alias"), is(true));        assertThat(templateUpdated.getMappings().containsKey("tweet"), is(true));    }    @Test    public void templateExists_withTemplateDefined(){        this.operations.createTemplate(DEFAULT_TEMPLATE_NAME, DEFAULT_TEMPLATE_URL, false);        assertTrue(this.operations.templateExists(DEFAULT_TEMPLATE_NAME));    }    @Test    public void templateExists_withTemplateUndefined(){        assertFalse(this.operations.templateExists("UNKNOWN"));    }    @Test    public void createIndex(){        assertThat(this.operations.createIndex(INDEX1_NAME), is(true));        assertThat(this.operations.indexExists(INDEX1_NAME), is(true));    }    @Test    public void createIndexWithSettingsAndMapping() throws Exception{        assertThat(this.operations.createIndexWithSettingsAndMapping(INDEX_BOOK_NAME, INDEX_BOOK_PATH), is(true));        assertThat(this.operations.indexExists(INDEX_BOOK_NAME), is(true));        GetMappingsRequest mappingsRequest = new GetMappingsRequest()                .indices(INDEX_BOOK_NAME);        GetMappingsResponse response = this.client.indices().getMapping(mappingsRequest, RequestOptions.DEFAULT);        assertThat(response.getMappings().containsKey(INDEX_BOOK_NAME), is(true));        ImmutableOpenMap<String, MappingMetaData> indexMapping = response.getMappings().get(INDEX_BOOK_NAME);        assertThat(indexMapping.containsKey("book"), is(true));        GetSettingsRequest settingsRequest = new GetSettingsRequest()                .indices(INDEX_BOOK_NAME);        GetSettingsResponse settingsResponse = this.client.indices().getSettings(settingsRequest, RequestOptions.DEFAULT);        ImmutableOpenMap<String, Settings> indexSettings = settingsResponse.getIndexToSettings();        assertThat(indexSettings.containsKey(INDEX_BOOK_NAME), is(true));        Settings settings = indexSettings.get(INDEX_BOOK_NAME);        assertThat(settings.get("index.refresh_interval"), is(equalTo("1s")));        assertThat(settings.get("index.number_of_shards"), is(equalTo("1")));        assertThat(settings.get("index.number_of_replicas"), is(equalTo("1")));        assertThat(settings.get("index.store.type"), is(equalTo("fs")));    }    @Test    public void bulkEntities() {        List entities = new ArrayList<>();        entities.add(createBook("1", "BOOK", "DESCRIPTION", 10d));        entities.add(createArticle("1", "ARTICLE", "DESCRIPTION", Article.EnumEntrepot.E1));        this.operations.bulkIndex(entities);        this.operations.refresh(Article.class);        this.operations.refresh(Book.class);        assertNotNull(this.operations.findById(Book.class, "1"));        assertNotNull(this.operations.findById(Article.class, "1"));    }    private Book createBook(String id, String title, String description, Double price) {        return Book.builder()                .documentId(id)                .title(title)                .description(description)                .price(price)                .build();    }    /**     * @param name     * @param description     * @param entrepot     * @return     */    private Article createArticle(String id, String name, String description, Article.EnumEntrepot entrepot) {        return Article.builder()                .documentId(id)                .name(name)                .description(description)                .entrepot(entrepot)                .build();    }}