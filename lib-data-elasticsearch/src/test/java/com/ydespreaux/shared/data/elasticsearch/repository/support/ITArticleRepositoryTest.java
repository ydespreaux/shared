package com.ydespreaux.shared.data.elasticsearch.repository.support;import com.ydespreaux.shared.data.autoconfigure.elasticsearch.ElasticsearchDataAutoConfiguration;import com.ydespreaux.shared.data.elasticsearch.ScrolledPage;import com.ydespreaux.shared.data.elasticsearch.ScrolledPageable;import com.ydespreaux.shared.data.elasticsearch.configuration.ElasticsearchConfiguration;import com.ydespreaux.shared.data.elasticsearch.core.ElasticsearchOperations;import com.ydespreaux.shared.data.elasticsearch.entities.Article;import com.ydespreaux.shared.data.elasticsearch.repositories.ArticleRepository;import org.elasticsearch.index.query.QueryBuilders;import org.junit.Before;import org.junit.Test;import org.junit.runner.RunWith;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.autoconfigure.elasticsearch.rest.RestClientAutoConfiguration;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.data.domain.Sort;import org.springframework.test.annotation.DirtiesContext;import org.springframework.test.context.junit4.SpringRunner;import java.util.ArrayList;import java.util.List;import java.util.Optional;import java.util.UUID;import java.util.concurrent.ExecutionException;import static org.hamcrest.Matchers.*;import static org.junit.Assert.assertThat;import static org.junit.Assert.assertTrue;@DirtiesContext@RunWith(SpringRunner.class)@SpringBootTest(classes = {        RestClientAutoConfiguration.class,        ElasticsearchDataAutoConfiguration.class,        ElasticsearchConfiguration.class})public class ITArticleRepositoryTest {    @Autowired    private ArticleRepository repository;    @Autowired    private ElasticsearchOperations elasticsearchOperations;    @Before    public void setUp(){        this.repository.deleteAll();    }    @Test    public void findById() {        Article articleIndexed = indexArticle("Article1", "Description de l'article", Article.EnumEntrepot.E1);        this.repository.refresh();        Optional<Article> optionalArticle = this.repository.findById(articleIndexed.getDocumentId());        assertTrue(optionalArticle.isPresent());        Article articleLoaded = optionalArticle.get();        assertThat(articleLoaded.getDocumentId(), is(equalTo(articleIndexed.getDocumentId())));        assertThat(articleLoaded.getName(), is(equalTo(articleIndexed.getName())));        assertThat(articleLoaded.getDescription(), is(equalTo(articleIndexed.getDescription())));        assertThat(articleLoaded.getEntrepot(), is(equalTo(articleIndexed.getEntrepot())));        assertThat(articleLoaded.getDocumentVersion(), is(equalTo(1L)));    }    @Test    public void findByIdNotFound() {        Optional<Article> optionalArticle = this.repository.findById(UUID.randomUUID().toString());        assertThat(optionalArticle.isPresent(), is (false));    }    @Test    public void existsById() {        Article articleIndexed = indexArticle("Article1", "Description de l'article", Article.EnumEntrepot.E1);        this.repository.refresh();        assertThat(this.repository.existsById(articleIndexed.getDocumentId()), is(true));    }    @Test    public void notExistsById() {        Article articleIndexed = indexArticle("Article1", "Description de l'article", Article.EnumEntrepot.E1);        this.repository.refresh();        assertThat(this.repository.existsById(UUID.randomUUID().toString()), is(false));    }    @Test    public void save() {        Article article = createArticle("Article1", "Description de l'article", Article.EnumEntrepot.E1);        Article articleIndexed =this.repository.save(article);        this.repository.refresh();        assertThat(articleIndexed.getDocumentId(), is(notNullValue()));        assertThat(articleIndexed.getName(), is(equalTo(article.getName())));        assertThat(articleIndexed.getDescription(), is(equalTo(article.getDescription())));        assertThat(articleIndexed.getEntrepot(), is(equalTo(article.getEntrepot())));        assertThat(articleIndexed.getDocumentVersion(), is(equalTo(1L)));    }    @Test    public void save_bulk()  {        List<Article> articles = new ArrayList<>();        articles.add(createArticle("Article1", "Description de l'article 1", Article.EnumEntrepot.E1));        articles.add(createArticle("Article2", "Description de l'article 2", Article.EnumEntrepot.E2));        articles.add(createArticle("Article3", "Description de l'article 3", Article.EnumEntrepot.E1));        articles.add(createArticle("Article4", "Description de l'article 4", Article.EnumEntrepot.E3));        articles.add(createArticle("Article5", "Description de l'article 5", Article.EnumEntrepot.E1));        List<Article> articlesIndexed =this.repository.save(articles);        this.repository.refresh();        assertThat(articlesIndexed.size(), is(equalTo(articles.size())));        for (Article articleIndexed : articlesIndexed) {            assertThat(articleIndexed.getDocumentId(), is(notNullValue()));            assertThat(articleIndexed.getDocumentVersion(), is(equalTo(1L)));        }    }    @Test    public void deleteById() throws ExecutionException {        Article articleIndexed = indexArticle("Article1", "Description de l'article", Article.EnumEntrepot.E1);        this.repository.refresh();        this.repository.deleteById(articleIndexed.getDocumentId());        this.repository.refresh();        Optional<Article> optionalArticle = this.repository.findById(articleIndexed.getDocumentId());        assertThat(optionalArticle.isPresent(), is(false));    }    @Test    public void delete() throws ExecutionException {        Article articleIndexed = indexArticle("Article1", "Description de l'article", Article.EnumEntrepot.E1);        this.repository.refresh();        this.repository.delete(articleIndexed);        this.repository.refresh();        Optional<Article> optionalArticle = this.repository.findById(articleIndexed.getDocumentId());        assertThat(optionalArticle.isPresent(), is(false));    }    @Test    public void deleteAll() throws ExecutionException {        List<Article> articles = new ArrayList<>();        articles.add(indexArticle("Article1", "Description de l'article 1", Article.EnumEntrepot.E1));        articles.add(indexArticle("Article2", "Description de l'article 2", Article.EnumEntrepot.E2));        articles.add(indexArticle("Article3", "Description de l'article 3", Article.EnumEntrepot.E3));        this.repository.refresh();        this.repository.deleteAll(articles);        this.repository.refresh();        for (Article articleIndexed : articles) {            Optional<Article> optionalArticle = this.repository.findById(articleIndexed.getDocumentId());            assertThat(optionalArticle.isPresent(), is(false));        }    }    @Test    public void searchByEntrepot_withoutSort(){        List<Article> articles = new ArrayList<>();        articles.add(indexArticle("Article1", "Description de l'article 1", Article.EnumEntrepot.E1));        articles.add(indexArticle("Article2", "Description de l'article 2", Article.EnumEntrepot.E2));        articles.add(indexArticle("Article3", "Description de l'article 3", Article.EnumEntrepot.E3));        articles.add(indexArticle("Article4", "Description de l'article 4", Article.EnumEntrepot.E1));        articles.add(indexArticle("Article5", "Description de l'article 5", Article.EnumEntrepot.E1));        this.repository.refresh();        List<Article> result = this.repository.search(QueryBuilders.matchQuery("entrepot", "E1"), (Sort)null);        assertThat(result.size(), is(equalTo(3)));        for (Article article : result) {            assertThat(article.getDocumentId(), is(notNullValue()));            assertThat(article.getDocumentVersion(), is(notNullValue()));        }    }    @Test    public void searchByEntrepot_withSort(){        List<Article> articles = new ArrayList<>();        articles.add(indexArticle("Article5", "Description de l'article 5", Article.EnumEntrepot.E1));        articles.add(indexArticle("Article1", "Description de l'article 1", Article.EnumEntrepot.E1));        articles.add(indexArticle("Article4", "Description de l'article 4", Article.EnumEntrepot.E1));        articles.add(indexArticle("Article2", "Description de l'article 2", Article.EnumEntrepot.E2));        articles.add(indexArticle("Article3", "Description de l'article 3", Article.EnumEntrepot.E3));        this.repository.refresh();        List<Article> result = this.repository.search(QueryBuilders.matchQuery("entrepot", "E1"), Sort.by(Sort.Direction.DESC, "name"));        assertThat(result.size(), is(equalTo(3)));        for (Article article : result) {            assertThat(article.getDocumentId(), is(notNullValue()));            assertThat(article.getDocumentVersion(), is(notNullValue()));        }        assertThat(result.get(0).getName(), is(equalTo("Article5")));        assertThat(result.get(1).getName(), is(equalTo("Article4")));        assertThat(result.get(2).getName(), is(equalTo("Article1")));    }    @Test    public void searchByDescription_withSort(){        List<Article> articles = new ArrayList<>();        articles.add(indexArticle("Article5", "Description de l'article 5", Article.EnumEntrepot.E1));        articles.add(indexArticle("Article1", "Description de l'article 1", Article.EnumEntrepot.E1));        articles.add(indexArticle("Article4", "Description de l'article 4", Article.EnumEntrepot.E1));        articles.add(indexArticle("Article2", "Description de l'article 2", Article.EnumEntrepot.E2));        articles.add(indexArticle("Article3", "Description de l'article 3", Article.EnumEntrepot.E3));        this.repository.refresh();        List<Article> result = this.repository.search(QueryBuilders.matchPhraseQuery("description", "Description"), Sort.by(Sort.Direction.ASC, "name"));        assertThat(result.size(), is(equalTo(5)));        for (Article article : result) {            assertThat(article.getDocumentId(), is(notNullValue()));            assertThat(article.getDocumentVersion(), is(notNullValue()));        }        assertThat(result.get(0).getName(), is(equalTo("Article1")));        assertThat(result.get(1).getName(), is(equalTo("Article2")));        assertThat(result.get(2).getName(), is(equalTo("Article3")));        assertThat(result.get(3).getName(), is(equalTo("Article4")));        assertThat(result.get(4).getName(), is(equalTo("Article5")));    }    @Test    public void searchByDescription_withScroll() {        List<Article> articles = new ArrayList<>();        articles.add(indexArticle("Article5", "Description de l'article 5", Article.EnumEntrepot.E1));        articles.add(indexArticle("Article1", "Description de l'article 1", Article.EnumEntrepot.E1));        articles.add(indexArticle("Article4", "Description de l'article 4", Article.EnumEntrepot.E1));        articles.add(indexArticle("Article2", "Description de l'article 2", Article.EnumEntrepot.E2));        articles.add(indexArticle("Article3", "Description de l'article 3", Article.EnumEntrepot.E3));        this.repository.refresh();        ScrolledPageable pageable = ScrolledPageable.of(2, Sort.by(Sort.Direction.ASC, "name"));        pageable.setScrollTimeInMinutes(1);        ScrolledPage<Article> result = this.repository.search(QueryBuilders.matchAllQuery(), pageable);        String scrollId = result.getScrollId();        assertThat(scrollId, is(notNullValue()));        assertThat(result.getTotalElements(), is(equalTo(5L)));        assertThat(result.getContent().size(), is(equalTo(2)));        assertThat(result.getContent().get(0).getName(), is(equalTo("Article1")));        assertThat(result.getContent().get(1).getName(), is(equalTo("Article2")));        pageable.setScrollId(scrollId);        result = this.repository.search(pageable);        assertThat(result.getTotalElements(), is(equalTo(5L)));        assertThat(result.getContent().size(), is(equalTo(2)));        assertThat(result.getContent().get(0).getName(), is(equalTo("Article3")));        assertThat(result.getContent().get(1).getName(), is(equalTo("Article4")));        result = this.repository.search(pageable);        assertThat(result.getTotalElements(), is(equalTo(5L)));        assertThat(result.getContent().size(), is(equalTo(1)));        assertThat(result.getContent().get(0).getName(), is(equalTo("Article5")));        result = this.repository.search(pageable);        assertThat(result.getTotalElements(), is(equalTo(5L)));        assertThat(result.getContent().size(), is(equalTo(0)));    }    @Test    public void searchByAllFields_1_withSort(){        List<Article> articles = new ArrayList<>();        articles.add(indexArticle("Blake et Mortimer - Tome 25 : La vallée des immortels", "À Lhassa, le palais impérial du dictateur Basam-Damdu est anéanti par une escadrille d’Espadons, et le monde, soulagé, fête la fin de la troisième guerre mondiale...", Article.EnumEntrepot.E1));        articles.add(indexArticle("Et puis Colette", "Anouk, trentenaire parisienne enfermée dans la routine, vient d’apprendre le décès de sa soeur...", Article.EnumEntrepot.E1));        articles.add(indexArticle("Live Is love Double Vinyle", "Thomas s’est pour ce disque mis à nu, sans concession aucune...", Article.EnumEntrepot.E2));        articles.add(indexArticle("Black City Parade", "Exceptionnel : pour la 1ère fois ! Indochine records et Sony Music sont fiers de proposer les rééditions des 12 albums studio d’Indochine...", Article.EnumEntrepot.E2));        this.repository.refresh();        List<Article> result = this.repository.search(QueryBuilders.matchPhraseQuery("search_fieds", "City"), Sort.by(Sort.Direction.ASC, "name"));        assertThat(result.size(), is(equalTo(1)));        for (Article article : result) {            assertThat(article.getDocumentId(), is(notNullValue()));            assertThat(article.getDocumentVersion(), is(notNullValue()));        }        assertThat(result.get(0).getName(), is(equalTo("Black City Parade")));    }    @Test    public void searchByAllFields_2_withSort(){        List<Article> articles = new ArrayList<>();        articles.add(indexArticle("Black City Parade", "Exceptionnel : pour la 1ère fois ! Indochine records et Sony Music sont fiers de proposer les rééditions des 12 albums studio d’Indochine...", Article.EnumEntrepot.E2));        articles.add(indexArticle("Blake et Mortimer - Tome 25 : La vallée des immortels", "À Lhassa, le palais impérial du dictateur Basam-Damdu est anéanti par une escadrille d’Espadons, et le monde, soulagé, fête la fin de la troisième guerre mondiale...", Article.EnumEntrepot.E1));        articles.add(indexArticle("Et puis Colette", "Anouk, trentenaire parisienne enfermée dans la routine, vient d’apprendre le décès de sa soeur...", Article.EnumEntrepot.E1));        articles.add(indexArticle("Live Is love Double Vinyle", "Thomas s’est pour ce disque mis à nu, sans concession aucune...", Article.EnumEntrepot.E2));        this.repository.refresh();        List<Article> result = this.repository.search(QueryBuilders.matchPhraseQuery("search_fieds", "E2"), Sort.by(Sort.Direction.ASC, "name"));        assertThat(result.size(), is(equalTo(2)));        for (Article article : result) {            assertThat(article.getDocumentId(), is(notNullValue()));            assertThat(article.getDocumentVersion(), is(notNullValue()));        }        assertThat(result.get(0).getName(), is(equalTo("Black City Parade")));        assertThat(result.get(1).getName(), is(equalTo("Live Is love Double Vinyle")));    }    /**     *     * @param name     * @param description     * @param entrepot     * @return     */    private Article createArticle(String name, String description, Article.EnumEntrepot entrepot) {        return Article.builder()                .name(name)                .description(description)                .entrepot(entrepot)                .build();    }    private Article indexArticle(String name, String description, Article.EnumEntrepot entrepot) {        return this.elasticsearchOperations.index(createArticle(name, description, entrepot), Article.class);    }}